# Данный манифест представляет собой сборку создаваемых объектов, которые в один клик помогут полноценно развернуть сервис для инфраструктуры.
# В этом файле описано развертывание сервиса Prometheus для его дальнейшего внедрения в инфраструктуру мониторинга общего назначения.
# Также стоит отметить тот факт, что многие параметры, такие как тип сервиса, используемый пользователь, выделяемые ресурсы и т.д. опциональны,
# поэтому перед запуском необходимо (при желании) изменить конфигурацию в соответствии со своими требованиями.

# --------------------------------------------------------------------------------------------------------------------------------------------

apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-account
  namespace: monitoring
  labels:
    app: prometheus-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
  namespace: monitoring
  labels:
    app: prometheus-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - configmaps
  - services
  - deployments
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-binding
  namespace: monitoring
  labels:
    app: prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-account
  namespace: monitoring
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-prometeus
  namespace: monitoring
  labels:
    app: prometheus-server
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: monitoring
  labels:
    app: prometheus-server
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/service: "prometheus"
        prometheus.io/port: "9090"
    spec:
      containers:
      - name: prometheus-server
        imagePullPolicy: IfNotPresent
        image: prom/prometheus
        ports:
          - name: prometheus-web
            protocol: TCP
            containerPort: 9090
        args:
          - '--storage.tsdb.retention=24h'
          - '--storage.tsdb.path=/prometheus'
          - '--config.file=/etc/prometheus/prometheus.yml'
        resources:
          requests:
            cpu: "0.2"
            memory: "200Mi"        
          limits:
            cpu: "0.5"
            memory: "500Mi"
        livenessProbe:
          tcpSocket:
            port: 9090
          successThreshold: 1
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 9090
          successThreshold: 1
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 30
        volumeMounts:
          - name: prometheus-config
            mountPath: /etc/prometheus/
          - name: prometheus-storage
            mountPath: /prometheus/
      volumes:
        - name: prometheus-config
          configMap:
            defaultMode: 420
            name: prometheus-configmap
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: pvc-prometeus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      restartPolicy: Always
      serviceAccountName: prometheus-account
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
  labels:
    app: prometheus-server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/service: "prometheus"
    prometheus.io/port: "9090"
spec:
  selector:
    app: prometheus-server
  type: ClusterIP
  ports:
  - name: prometheus-web
    protocol: TCP
    port: 9090
    targetPort: 9090
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: monitoring
  name: prometheus-configmap
  labels:
    app: prometheus-server
data:
  prometheus.yml: |
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    
    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
        - targets: ['prometheus-service.monitoring.svc.cluster.local:9090']

    - job_name: 'kube-state-metrics'
      static_configs:
        - targets: ['kube-state-metrics.monitoring.svc.cluster.local:8080']

    - job_name: 'node-exporter'
      kubernetes_sd_configs: 
        - role: node
      relabel_configs:
        - source_labels: [__meta_kubernetes_node_name]
          action: replace
          regex: (.+)
          replacement: $1:9100
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_node_address_(.+)

    - job_name: 'blackbox-exporter'
      scrape_timeout: 15s
      scrape_interval: 15s
      metrics_path: /probe
      params:
        module: [http_2xx]
      static_configs:
        - targets:
          - http://prometheus-service.monitoring.svc:9090
          - http://kube-state-metrics.monitoring.svc:8080

      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: blackbox-service:9115

    - job_name: "kubernetes-nodes"
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      authorization:
        credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
        - role: node
      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

    - job_name: "kubernetes-apiservers"
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      authorization:
        credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

    - job_name: 'kubernetes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
        - role: node
      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          target_label: __metrics_path__